const CHAT_URL = "https://chatgpt.com/g/g-68e628cb581c819192fc463204dba31a-iskierka-test";
const PAUSE_MS = 1000;
const WAIT_FOR_TEXTAREA_MS = 10000; // 10 sekund na znalezienie textarea
const WAIT_FOR_RESPONSE_MS = 1200000; // 20 minut na odpowied≈∫ ChatGPT
const RETRY_INTERVAL_MS = 500;

// Funkcja pobierania prompt chain od u≈ºytkownika
async function getPromptChain() {
  return new Promise((resolve) => {
    let resolved = false;
    
    // Stw√≥rz ma≈Çe okno z dialogiem
    chrome.windows.create({
      url: chrome.runtime.getURL('prompt-dialog.html'),
      type: 'popup',
      width: 600,
      height: 400
    }, (window) => {
      const windowId = window.id;
      
      // Listener na wiadomo≈õƒá z dialogu
      const messageListener = (message, sender) => {
        if (message.type === 'PROMPT_CHAIN_SUBMIT') {
          cleanup();
          chrome.windows.remove(sender.tab.windowId, () => {
            if (chrome.runtime.lastError) {
              // Okno ju≈º zamkniƒôte - ignoruj
            }
          });
          if (!resolved) {
            resolved = true;
            resolve(message.prompts);
          }
        } else if (message.type === 'PROMPT_CHAIN_CANCEL') {
          cleanup();
          chrome.windows.remove(sender.tab.windowId, () => {
            if (chrome.runtime.lastError) {
              // Okno ju≈º zamkniƒôte - ignoruj
            }
          });
          if (!resolved) {
            resolved = true;
            resolve(null);
          }
        }
      };
      
      // Listener na zamkniƒôcie okna (rƒôczne zamkniƒôcie przez X)
      const windowListener = (closedWindowId) => {
        if (closedWindowId === windowId) {
          cleanup();
          if (!resolved) {
            resolved = true;
            resolve(null);
          }
        }
      };
      
      function cleanup() {
        chrome.runtime.onMessage.removeListener(messageListener);
        chrome.windows.onRemoved.removeListener(windowListener);
      }
      
      chrome.runtime.onMessage.addListener(messageListener);
      chrome.windows.onRemoved.addListener(windowListener);
    });
  });
}

// Event listener dla klikniƒôcia w ikonƒô
chrome.action.onClicked.addListener(async () => {
  try {
    // Najpierw pobierz prompt chain od u≈ºytkownika
    const promptChain = await getPromptChain();
    
    if (!promptChain || promptChain.length === 0) {
      console.log("Anulowano lub brak prompt√≥w");
      return;
    }
    
    console.log(`Prompt chain: ${promptChain.length} prompt√≥w`);
    
    // Pobierz karty Economist
    const tabs = await chrome.tabs.query({url: "*://*.economist.com/*"});
    
    if (tabs.length === 0) {
      console.log("Brak otwartych kart Economist");
      return;
    }

    console.log(`Znaleziono ${tabs.length} kart Economist`);

    // Przetwarzaj wszystkie karty R√ìWNOLEGLE - ka≈ºda dostaje swoje okno ChatGPT
    const processingPromises = tabs.map(async (tab, index) => {
      try {
        console.log(`\n=== [${index + 1}/${tabs.length}] Przetwarzam kartƒô ID: ${tab.id}, Tytu≈Ç: ${tab.title}`);
        console.log(`URL: ${tab.url}`);
        
        // Ma≈Çe op√≥≈∫nienie miƒôdzy startami aby nie przyt≈Çoczyƒá przeglƒÖdarki
        await sleep(index * 500);
        
        // Ekstraktuj tekst z karty (bez aktywacji - nie przeszkadzamy u≈ºytkownikowi)
        const results = await chrome.scripting.executeScript({
          target: { tabId: tab.id },
          function: extractText
        });

        const extractedText = results[0]?.result;
        console.log(`[${index + 1}/${tabs.length}] Wyekstrahowano ${extractedText?.length || 0} znak√≥w`);
        
        if (!extractedText || extractedText.length < 50) {
          console.log(`[${index + 1}/${tabs.length}] Pominiƒôto - za ma≈Ço tekstu`);
          return { success: false, reason: 'za ma≈Ço tekstu' };
        }

        // Pobierz tytu≈Ç
        const title = tab.title || "Bez tytu≈Çu";

        // Z≈Ç√≥≈º payload
        const payload = `Tytu≈Ç: ${title}\n\n${extractedText}`;

        // Otw√≥rz nowe okno ChatGPT
        const window = await chrome.windows.create({
          url: CHAT_URL,
          type: "normal"
        });

        const chatTabId = window.tabs[0].id;

        // Czekaj na za≈Çadowanie strony
        await waitForTabComplete(chatTabId);

        // Wstrzyknij tekst do ChatGPT z retry i uruchom prompt chain
        await chrome.scripting.executeScript({
          target: { tabId: chatTabId },
          function: injectToChat,
          args: [payload, promptChain, WAIT_FOR_TEXTAREA_MS, WAIT_FOR_RESPONSE_MS, RETRY_INTERVAL_MS]
        });

        console.log(`[${index + 1}/${tabs.length}] ‚úÖ Rozpoczƒôto przetwarzanie: ${title}`);
        return { success: true, title };

      } catch (error) {
        console.error(`[${index + 1}/${tabs.length}] ‚ùå B≈ÇƒÖd:`, error);
        return { success: false, error: error.message };
      }
    });

    // Poczekaj na uruchomienie wszystkich
    const results = await Promise.allSettled(processingPromises);
    
    const successful = results.filter(r => r.status === 'fulfilled' && r.value.success).length;
    console.log(`\nüéâ Uruchomiono ${successful}/${tabs.length} proces√≥w ChatGPT`);

  } catch (error) {
    console.error("B≈ÇƒÖd g≈Ç√≥wny:", error);
  }
});

// Funkcja ekstrakcji tekstu (content script)
function extractText() {
  console.log("Pr√≥bujƒô wyekstrahowaƒá tekst z The Economist...");
  
  // Strategia 1: Szukaj g≈Ç√≥wnego kontenera artyku≈Çu
  const selectors = [
    'article',
    '[data-test-id="Article"]',
    '.article__body-text',
    '.layout-article-body',
    'main article',
    'main',
    '.article-content',
    '#content'
  ];
  
  for (const selector of selectors) {
    const element = document.querySelector(selector);
    if (element) {
      const text = element.innerText || element.textContent;
      if (text && text.length > 100) {
        console.log(`Znaleziono tekst przez selector: ${selector}, d≈Çugo≈õƒá: ${text.length}`);
        return text;
      }
    }
  }
  
  // Fallback: ca≈Ça strona
  const bodyText = document.body.innerText || document.body.textContent;
  console.log(`Fallback do body, d≈Çugo≈õƒá: ${bodyText.length}`);
  return bodyText;
}

// Funkcja wklejania do ChatGPT (content script)
async function injectToChat(payload, promptChain, textareaWaitMs, responseWaitMs, retryIntervalMs) {
  // Funkcja tworzƒÖca licznik prompt√≥w
  function createCounter() {
    const counter = document.createElement('div');
    counter.id = 'economist-prompt-counter';
    counter.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 16px 24px;
      border-radius: 12px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      font-size: 14px;
      font-weight: 600;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      z-index: 10000;
      min-width: 200px;
      text-align: center;
    `;
    document.body.appendChild(counter);
    return counter;
  }
  
  // Funkcja aktualizujƒÖca licznik
  function updateCounter(counter, current, total, status = '') {
    if (current === 0) {
      counter.innerHTML = `
        <div style="font-size: 16px; margin-bottom: 4px;">üìù Przetwarzanie artyku≈Çu</div>
        <div style="font-size: 12px; opacity: 0.9;">${status}</div>
      `;
    } else {
      const percent = Math.round((current / total) * 100);
      counter.innerHTML = `
        <div style="font-size: 16px; margin-bottom: 4px;">Prompt Chain</div>
        <div style="font-size: 24px; margin-bottom: 4px;">${current} / ${total}</div>
        <div style="background: rgba(255,255,255,0.3); height: 6px; border-radius: 3px; margin-bottom: 4px;">
          <div style="background: white; height: 100%; border-radius: 3px; width: ${percent}%; transition: width 0.3s;"></div>
        </div>
        <div style="font-size: 12px; opacity: 0.9;">${status}</div>
      `;
    }
  }
  
  // Funkcja usuwajƒÖca licznik
  function removeCounter(counter, success = true) {
    if (success) {
      counter.innerHTML = `
        <div style="font-size: 18px;">üéâ Zako≈Ñczono!</div>
      `;
      setTimeout(() => counter.remove(), 3000);
    } else {
      counter.remove();
    }
  }
  
  // Funkcja czekajƒÖca na zako≈Ñczenie odpowiedzi ChatGPT
  async function waitForResponse(maxWaitMs) {
    const startTime = Date.now();
    
    console.log("‚è≥ Czekam na odpowied≈∫ ChatGPT...");
    
    // ===== FAZA 1: Detekcja STARTU odpowiedzi =====
    // Czekaj a≈º ChatGPT zacznie generowaƒá odpowied≈∫
    // Chain-of-thought model mo≈ºe my≈õleƒá 4-5 min przed startem
    let responseStarted = false;
    const startTimeout = Math.min(maxWaitMs, 1200000); // Max 20 minut na start
    
    while (Date.now() - startTime < startTimeout) {
      // Szukaj edytora - mo≈ºe byƒá w r√≥≈ºnych stanach
      const editorAny = document.querySelector('[role="textbox"]') ||
                        document.querySelector('[contenteditable]') ||
                        document.querySelector('[data-testid="composer-input"]');
      
      const stopButton = document.querySelector('button[aria-label*="Stop"]') || 
                        document.querySelector('[data-testid="stop-button"]') ||
                        document.querySelector('button[aria-label*="stop"]');
      
      const sendButton = document.querySelector('[data-testid="send-button"]') ||
                        document.querySelector('#composer-submit-button') ||
                        document.querySelector('button[aria-label="Send"]');
      
      // ChatGPT zaczƒÖ≈Ç odpowiadaƒá je≈õli:
      // 1. Jest stopButton (g≈Ç√≥wny wska≈∫nik generowania)
      // 2. LUB editor jest disabled (contenteditable="false")
      // 3. LUB sendButton jest disabled (podczas generowania)
      const editorDisabled = editorAny && editorAny.getAttribute('contenteditable') === 'false';
      const sendDisabled = sendButton && sendButton.disabled;
      
      if (stopButton || editorDisabled || sendDisabled) {
        console.log("‚úì ChatGPT zaczƒÖ≈Ç odpowiadaƒá", {
          stopButton: !!stopButton,
          editorDisabled: !!editorDisabled,
          sendDisabled: !!sendDisabled
        });
        responseStarted = true;
        break;
      }
      
      // Loguj co 30s ≈ºe czekamy
      if ((Date.now() - startTime) % 30000 < 500) {
        const elapsed = Math.round((Date.now() - startTime) / 1000);
        console.log(`‚è≥ Czekam na start odpowiedzi... (${elapsed}s)`);
      }
      
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    if (!responseStarted) {
      console.error(`‚ùå ChatGPT nie zaczƒÖ≈Ç odpowiadaƒá po ${Math.round(startTimeout/1000)}s - prompt prawdopodobnie nie zosta≈Ç wys≈Çany!`);
      return false;
    }
    
    // ===== FAZA 2: Detekcja ZAKO≈ÉCZENIA odpowiedzi =====
    // Czekaj a≈º ChatGPT sko≈Ñczy i interface bƒôdzie gotowy na kolejny prompt
    let consecutiveReady = 0;
    let logInterval = 0;
    
    while (Date.now() - startTime < maxWaitMs) {
      // Szukaj wszystkich element√≥w interfejsu
      const editor = document.querySelector('[role="textbox"][contenteditable="true"]') ||
                     document.querySelector('div[contenteditable="true"]') ||
                     document.querySelector('[data-testid="composer-input"][contenteditable="true"]');
      
      const stopButton = document.querySelector('button[aria-label*="Stop"]') || 
                        document.querySelector('[data-testid="stop-button"]') ||
                        document.querySelector('button[aria-label*="stop"]');
      
      const sendButton = document.querySelector('[data-testid="send-button"]') ||
                        document.querySelector('#composer-submit-button') ||
                        document.querySelector('button[aria-label="Send"]') ||
                        document.querySelector('button[aria-label*="Send"]');
      
      // Co 10 iteracji (5s) loguj stan
      if (logInterval % 10 === 0) {
        console.log(`üîç Stan interfejsu:`, {
          editor_exists: !!editor,
          editor_enabled: editor?.getAttribute('contenteditable') === 'true',
          stopButton_exists: !!stopButton,
          sendButton_exists: !!sendButton,
          sendButton_disabled: sendButton?.disabled,
          consecutiveReady: consecutiveReady,
          elapsed: Math.round((Date.now() - startTime) / 1000) + 's'
        });
      }
      logInterval++;
      
      // ===== WARUNKI GOTOWO≈öCI =====
      // Interface jest gotowy gdy ChatGPT sko≈Ñczy≈Ç generowaƒá:
      // 1. BRAK stopButton (ChatGPT przesta≈Ç generowaƒá)
      // 2. Editor ISTNIEJE i jest ENABLED (contenteditable="true")
      // 
      // UWAGA: SendButton mo≈ºe nie istnieƒá gdy editor jest pusty - sprawdzimy go dopiero w sendPrompt()
      
      const editorReady = editor && editor.getAttribute('contenteditable') === 'true';
      const noGeneration = !stopButton;
      
      const isReady = noGeneration && editorReady;
      
      if (isReady) {
        consecutiveReady++;
        console.log(`‚úì Interface ready (${consecutiveReady}/3) - warunki OK`);
        
        // Potwierd≈∫ stan przez 3 kolejne sprawdzenia (1.5s)
        // To eliminuje false positives gdy UI migocze miƒôdzy stanami
        if (consecutiveReady >= 3) {
          console.log("‚úÖ ChatGPT zako≈Ñczy≈Ç odpowied≈∫ - interface gotowy");
          // Dodatkowe czekanie dla stabilizacji UI (2s wystarczy)
          await new Promise(resolve => setTimeout(resolve, 2000));
          return true;
        }
      } else {
        // Reset licznika je≈õli kt√≥rykolwiek warunek nie jest spe≈Çniony
        if (consecutiveReady > 0) {
          console.log(`‚ö†Ô∏è Interface NOT ready, resetujƒô licznik (by≈Ç: ${consecutiveReady})`);
          console.log(`  Pow√≥d: noGeneration=${noGeneration}, editorReady=${editorReady}`);
        }
        consecutiveReady = 0;
      }
      
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.error(`‚ùå TIMEOUT czekania na odpowied≈∫ po ${Math.round(maxWaitMs/1000)}s`);
    return false;
  }

  // Funkcja wyciƒÖgajƒÖca ostatniƒÖ odpowied≈∫ ChatGPT z DOM
  function getLastResponseText() {
    console.log("üîç WyciƒÖgam ostatniƒÖ odpowied≈∫ ChatGPT...");
    
    // Szukaj ostatniej odpowiedzi ChatGPT w konwersacji
    const messages = document.querySelectorAll('[data-message-author-role="assistant"]');
    
    if (messages.length > 0) {
      const lastMessage = messages[messages.length - 1];
      const text = lastMessage.innerText || lastMessage.textContent || '';
      console.log(`‚úì Znaleziono odpowied≈∫: ${text.length} znak√≥w`);
      return text;
    }
    
    // Fallback - szukaj artyku≈Ç√≥w z odpowiedziami
    const articles = document.querySelectorAll('article');
    if (articles.length > 0) {
      const lastArticle = articles[articles.length - 1];
      const text = lastArticle.innerText || lastArticle.textContent || '';
      console.log(`‚úì Znaleziono odpowied≈∫ (fallback): ${text.length} znak√≥w`);
      return text;
    }
    
    console.warn("‚ö†Ô∏è Nie znaleziono odpowiedzi ChatGPT w DOM");
    return '';
  }
  
  // Funkcja walidujƒÖca odpowied≈∫ (min 500 znak√≥w)
  function validateResponse(text) {
    const minLength = 500;
    const isValid = text.length >= minLength;
    
    console.log(`üìä Walidacja odpowiedzi: ${text.length} znak√≥w (min: ${minLength}) - ${isValid ? '‚úÖ OK' : '‚ùå ZA KR√ìTKA'}`);
    
    if (!isValid && text.length > 0) {
      console.log(`üìù Preview odpowiedzi: "${text.substring(0, 200)}${text.length > 200 ? '...' : ''}"`);
    }
    
    return isValid;
  }
  
  // Funkcja pokazujƒÖca przycisk "Kontynuuj" i czekajƒÖca na klikniƒôcie
  function showContinueButton(counter, currentPrompt, totalPrompts) {
    return new Promise((resolve) => {
      console.log(`‚è∏Ô∏è Pokazujƒô przycisk Kontynuuj dla prompta ${currentPrompt}/${totalPrompts}`);
      
      counter.innerHTML = `
        <div style="font-size: 16px; margin-bottom: 8px;">‚ö†Ô∏è Zatrzymano</div>
        <div style="font-size: 14px; margin-bottom: 12px;">Prompt ${currentPrompt} / ${totalPrompts}</div>
        <div style="font-size: 12px; opacity: 0.9; margin-bottom: 12px; line-height: 1.4;">
          Odpowied≈∫ niepoprawna lub timeout.<br>
          Napraw sytuacjƒô w ChatGPT, potem kliknij:
        </div>
        <button id="continue-chain-btn" style="
          background: white;
          color: #667eea;
          border: none;
          padding: 10px 20px;
          border-radius: 8px;
          font-weight: 600;
          cursor: pointer;
          font-size: 14px;
          width: 100%;
          transition: transform 0.2s;
        " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">‚ñ∂Ô∏è Kontynuuj</button>
      `;
      
      const btn = document.getElementById('continue-chain-btn');
      btn.addEventListener('click', () => {
        console.log('‚úÖ U≈ºytkownik kliknƒÖ≈Ç Kontynuuj - wznawianie chain...');
        resolve();
      });
    });
  }

  // Funkcja wysy≈Çania pojedynczego prompta
  async function sendPrompt(promptText) {
    console.log("üîç Szukam edytora contenteditable...");
    
    // ChatGPT u≈ºywa contenteditable div, NIE textarea!
    let editor = null;
    const maxWait = 15000; // Zwiƒôkszono z 10s na 15s
    const startTime = Date.now();
    
    while (Date.now() - startTime < maxWait) {
      editor = document.querySelector('[role="textbox"][contenteditable="true"]') ||
               document.querySelector('div[contenteditable="true"]');
      if (editor) {
        break;
      }
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    if (!editor) {
      console.error("‚ùå Nie znaleziono edytora contenteditable po " + maxWait + "ms");
      return false;
    }
    
    console.log("‚úì Znaleziono edytor");
    
    // Focus i wyczy≈õƒá - ulepszona wersja
    editor.focus();
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Wyczy≈õƒá zawarto≈õƒá - najpierw spr√≥buj nowoczesnym API
    try {
      // Metoda 1: Selection API (najbardziej niezawodna)
      const selection = window.getSelection();
      const range = document.createRange();
      range.selectNodeContents(editor);
      selection.removeAllRanges();
      selection.addRange(range);
      
      // Usu≈Ñ przez KeyboardEvent (symuluje naturalne usuwanie)
      editor.dispatchEvent(new KeyboardEvent('keydown', { key: 'Delete', code: 'Delete', bubbles: true }));
      document.execCommand('delete', false, null);
      
    } catch (e) {
      console.warn("‚ö†Ô∏è Fallback czyszczenia:", e);
    }
    
    // Wymu≈õ czyszczenie przez innerHTML i textContent
    editor.innerHTML = '';
    editor.textContent = '';
    
    // Triggeruj event czyszczenia
    editor.dispatchEvent(new InputEvent('input', { bubbles: true, inputType: 'deleteContent' }));
    
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Wstaw tekst - ulepszona wersja
    // Najpierw jako textNode
    const textNode = document.createTextNode(promptText);
    editor.appendChild(textNode);
    
    // Przesu≈Ñ kursor na koniec
    try {
      const selection = window.getSelection();
      const range = document.createRange();
      range.selectNodeContents(editor);
      range.collapse(false);
      selection.removeAllRanges();
      selection.addRange(range);
    } catch (e) {
      console.warn("‚ö†Ô∏è Nie uda≈Ço siƒô przesunƒÖƒá kursora:", e);
    }
    
    // Triggeruj wiƒôcej event√≥w dla pewno≈õci
    editor.dispatchEvent(new InputEvent('beforeinput', { bubbles: true, inputType: 'insertText' }));
    editor.dispatchEvent(new InputEvent('input', { bubbles: true, inputType: 'insertText' }));
    editor.dispatchEvent(new Event('change', { bubbles: true }));
    editor.dispatchEvent(new KeyboardEvent('keyup', { key: 'a', bubbles: true }));
    
    console.log(`‚úì Tekst wstawiony (${promptText.length} znak√≥w): "${promptText.substring(0, 50)}..."`);
    
    // Czekaj a≈º przycisk Send bƒôdzie enabled - zwiƒôkszony timeout
    let submitButton = null;
    let waitTime = 0;
    const maxButtonWait = 10000; // Zwiƒôkszono z 3s na 10s
    
    while (waitTime < maxButtonWait) {
      submitButton = document.querySelector('[data-testid="send-button"]') ||
                     document.querySelector('#composer-submit-button') ||
                     document.querySelector('button[aria-label="Send"]') ||
                     document.querySelector('button[aria-label*="Send"]') ||
                     document.querySelector('button[data-testid*="send"]');
      
      if (submitButton && !submitButton.disabled) {
        console.log(`‚úÖ Przycisk Send gotowy (${waitTime}ms)`);
        break;
      }
      
      // Loguj co 2s
      if (waitTime > 0 && waitTime % 2000 === 0) {
        console.log(`‚è≥ Czekam na przycisk Send... (${waitTime}ms / ${maxButtonWait}ms)`);
      }
      
      await new Promise(resolve => setTimeout(resolve, 100));
      waitTime += 100;
    }
    
    if (!submitButton) {
      console.error("‚ùå Nie znaleziono przycisku Send po " + maxButtonWait + "ms");
      return false;
    }
    
    if (submitButton.disabled) {
      console.error("‚ùå Przycisk Send jest disabled po " + maxButtonWait + "ms");
      return false;
    }
    
    // Poczekaj d≈Çu≈ºej przed klikniƒôciem - daj czas na stabilizacjƒô UI
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log("‚úì Klikam Send...");
    submitButton.click();
    
    // Poczekaj na reakcjƒô UI
    await new Promise(resolve => setTimeout(resolve, 1000));
    console.log("‚úÖ Prompt wys≈Çany");
    
    return true;
  }

  // G≈Ç√≥wna logika
  const startTime = Date.now();
  
  // Retry loop - czekaj na textarea
  while (Date.now() - startTime < textareaWaitMs) {
    const textarea = document.querySelector('textarea');
    
    if (textarea) {
      console.log("=== ROZPOCZYNAM PRZETWARZANIE ===");
      console.log(`Artyku≈Ç: ${payload.substring(0, 100)}...`);
      
      // Stw√≥rz licznik
      const counter = createCounter();
      updateCounter(counter, 0, promptChain ? promptChain.length : 0, 'Wysy≈Çam artyku≈Ç...');
      
      // Wy≈õlij tekst Economist
      console.log("üì§ Wysy≈Çam artyku≈Ç do ChatGPT...");
      await sendPrompt(payload);
      
      // Czekaj na odpowied≈∫ ChatGPT
      updateCounter(counter, 0, promptChain ? promptChain.length : 0, 'Czekam na odpowied≈∫...');
      await waitForResponse(responseWaitMs);
      console.log("‚úÖ Artyku≈Ç przetworzony");
      
      // Pauza przed prompt chain - interface musi byƒá gotowy
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Teraz uruchom prompt chain
      if (promptChain && promptChain.length > 0) {
        console.log(`\n=== PROMPT CHAIN: ${promptChain.length} prompt√≥w do wykonania ===`);
        console.log(`Pe≈Çna lista prompt√≥w:`, promptChain);
        
        for (let i = 0; i < promptChain.length; i++) {
          const prompt = promptChain[i];
          const remaining = promptChain.length - i - 1;
          
          console.log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
          console.log(`>>> PROMPT ${i + 1}/${promptChain.length} (pozosta≈Ço: ${remaining})`);
          console.log(`D≈Çugo≈õƒá: ${prompt.length} znak√≥w, ${prompt.split('\n').length} linii`);
          console.log(`Preview:\n${prompt.substring(0, 200)}${prompt.length > 200 ? '...' : ''}`);
          console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
          
          // Aktualizuj licznik - wysy≈Çanie
          updateCounter(counter, i + 1, promptChain.length, 'Wysy≈Çam prompt...');
          
          // Wy≈õlij prompt
          console.log(`[${i + 1}/${promptChain.length}] Wywo≈Çujƒô sendPrompt()...`);
          const sent = await sendPrompt(prompt);
          
          if (!sent) {
            console.error(`‚ùå Nie uda≈Ço siƒô wys≈Çaƒá prompta ${i + 1}/${promptChain.length}`);
            console.log(`‚è∏Ô∏è B≈ÇƒÖd wysy≈Çania - czekam na interwencjƒô u≈ºytkownika`);
            updateCounter(counter, i + 1, promptChain.length, `‚ùå B≈ÇƒÖd wysy≈Çania`);
            
            // Poka≈º przycisk i czekaj na user - mo≈ºe naprawiƒá sytuacjƒô
            await showContinueButton(counter, i + 1, promptChain.length);
            
            // User naprawi≈Ç, spr√≥buj wys≈Çaƒá ponownie ten sam prompt
            console.log(`üîÑ Kontynuacja po naprawie - ponowne wysy≈Çanie prompta ${i + 1}...`);
            const retried = await sendPrompt(prompt);
            
            if (!retried) {
              console.error(`‚ùå Ponowna pr√≥ba nieudana - przerywam chain`);
              updateCounter(counter, i + 1, promptChain.length, `‚ùå B≈ÇƒÖd krytyczny`);
              await new Promise(resolve => setTimeout(resolve, 10000));
              return; // Zako≈Ñcz bez usuwania licznika
            }
            
            console.log(`‚úÖ Ponowne wysy≈Çanie udane - kontynuujƒô chain`);
          }
          
          // Aktualizuj licznik - czekanie
          updateCounter(counter, i + 1, promptChain.length, 'Czekam na odpowied≈∫...');
          
          // Czekaj na odpowied≈∫ po ka≈ºdym promptcie
          console.log(`[${i + 1}/${promptChain.length}] Wywo≈Çujƒô waitForResponse()...`);
          const completed = await waitForResponse(responseWaitMs);
          
          // Walidacja po timeout - poka≈º przycisk kontynuuj
          if (!completed) {
            console.error(`‚ùå Timeout przy promptcie ${i + 1}/${promptChain.length}`);
            console.log(`‚è∏Ô∏è ChatGPT nie odpowiedzia≈Ç w czasie - czekam na interwencjƒô u≈ºytkownika`);
            updateCounter(counter, i + 1, promptChain.length, '‚è±Ô∏è Timeout - czekam...');
            
            // Poka≈º przycisk i czekaj na user
            await showContinueButton(counter, i + 1, promptChain.length);
            
            // User naprawi≈Ç sytuacjƒô, kontynuuj
            console.log(`üîÑ Kontynuacja po timeout - przechod≈∫ do walidacji odpowiedzi...`);
          }
          
          // Walidacja odpowiedzi - sprawd≈∫ czy jest wystarczajƒÖco d≈Çuga
          console.log(`[${i + 1}/${promptChain.length}] Walidacja odpowiedzi...`);
          const responseText = getLastResponseText();
          const isValid = validateResponse(responseText);
          
          if (!isValid) {
            console.error(`‚ùå Odpowied≈∫ niepoprawna przy promptcie ${i + 1}/${promptChain.length}`);
            console.error(`‚ùå D≈Çugo≈õƒá: ${responseText.length} znak√≥w (wymagane min 500)`);
            updateCounter(counter, i + 1, promptChain.length, '‚ùå Odpowied≈∫ za kr√≥tka');
            
            // Poka≈º przycisk i czekaj na user
            await showContinueButton(counter, i + 1, promptChain.length);
            
            // User naprawi≈Ç odpowied≈∫, kontynuuj
            console.log(`üîÑ Kontynuacja po naprawie odpowiedzi...`);
          }
          
          console.log(`‚úÖ Prompt ${i + 1}/${promptChain.length} zako≈Ñczony - odpowied≈∫ poprawna`);
          
          // Dodatkowa pauza przed nastƒôpnym promptem - zwiƒôkszona z 2s na 4s
          // Im p√≥≈∫niejszy prompt, tym d≈Çu≈ºsza pauza (progresywnie)
          const pauseTime = 4000 + (i * 500); // 4s + 0.5s za ka≈ºdy poprzedni prompt
          console.log(`‚è∏Ô∏è  Pauza ${pauseTime}ms przed kolejnym promptem...`);
          await new Promise(resolve => setTimeout(resolve, pauseTime));
        }
        
        // Sukces - pƒôtla zako≈Ñczona bez break
        console.log(`\nüéâ ZAKO≈ÉCZONO PROMPT CHAIN - wykonano wszystkie ${promptChain.length} prompt√≥w`);
        
        // Usu≈Ñ licznik z animacjƒÖ sukcesu
        removeCounter(counter, true);
      } else {
        console.log("‚ÑπÔ∏è Brak prompt chain do wykonania (prompt chain jest puste lub null)");
        
        // Usu≈Ñ licznik
        removeCounter(counter, true);
      }
      
      return;
    }
    
    // Czekaj przed nastƒôpnƒÖ pr√≥bƒÖ
    await new Promise(resolve => setTimeout(resolve, retryIntervalMs));
  }
  
  console.error("Nie znaleziono textarea w ChatGPT po " + textareaWaitMs + "ms");
}

// Funkcja pomocnicza do czekania
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Funkcja czekajƒÖca na pe≈Çne za≈Çadowanie karty
function waitForTabComplete(tabId) {
  return new Promise((resolve) => {
    const listener = (updatedTabId, changeInfo) => {
      if (updatedTabId === tabId && changeInfo.status === 'complete') {
        chrome.tabs.onUpdated.removeListener(listener);
        resolve();
      }
    };
    chrome.tabs.onUpdated.addListener(listener);
    
    // Sprawd≈∫ czy ju≈º jest complete
    chrome.tabs.get(tabId, (tab) => {
      if (tab.status === 'complete') {
        chrome.tabs.onUpdated.removeListener(listener);
        resolve();
      }
    });
  });
}
